# -*- coding: utf-8 -*-
"""price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CRV0awW6d_gGYAdGHKYwwJaYAsUQAVJ8
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn import tree
import matplotlib.pyplot as plt

maharashtra_data = pd.read_csv('price_recommendation.csv')
maharashtra_data = maharashtra_data[maharashtra_data['State'] == 'Maharashtra']
maharashtra_data.drop(columns=['Grade'], inplace=True)
maharashtra_data.drop(columns=['Variety'], inplace=True)
maharashtra_data.drop(columns=['Arrival_Date'], inplace=True)
maharashtra_data.drop(columns=['State'], inplace=True)

encoding_columns = ["District", "Market", "Commodity"]

# Initialize the LabelEncoder
label_encoder = LabelEncoder()

# Apply label encoding to each column
for col in encoding_columns:
    maharashtra_data[col] = label_encoder.fit_transform(maharashtra_data[col])



X = maharashtra_data.iloc[:, :-1].values
y = maharashtra_data.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

print( X)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

from sklearn.linear_model import LogisticRegression
regressor = LogisticRegression(random_state = 0)
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score

print(y_pred.shape)
print(y_test.shape)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)
print("R-squared:", r2)
print(regressor.predict(sc.transform([[0 ,14 ,11,200,600]])))

from joblib import dump
dump(regressor, 'price_prediction_model.joblib')
dump(sc, 'scaler.joblib')

# Import libraries
from sklearn.preprocessing import LabelEncoder

# Load the trained model (assuming you have it saved using joblib)
from joblib import load
loaded_model = load('price_prediction_model.joblib')

X = sc.transform([[0 ,14 ,11,200,600]])
predict=loaded_model.predict(X)
print(predict)