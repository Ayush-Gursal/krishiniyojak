# -*- coding: utf-8 -*-
"""Crop_Prediction_Model (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tFvpEV_DQSfWohwLnwYDYGDBMZ6SPO7O

# Decision Tree Classification

## Importing the libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.multioutput import MultiOutputRegressor
from sklearn.metrics import mean_squared_error

"""## Importing the dataset"""

dataset = pd.read_csv('Crop_recommendation.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

y_train = np.reshape(y_train, (1650, 1))
y_train

print(X_train.shape)

print(y_train)

print(X_test)

print(y_test)

"""## Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

print(X_test)

"""## Training the Decision Tree Classification model on the Training set"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

"""## Predicting a new result"""

print(classifier.predict(sc.transform([[65, 48, 46, 23 ,64, 400, 250]])))

y_pred_proba = classifier.predict_proba(sc.transform([[68, 48, 16, 23.35, 80.6734, 5.43333, 180]]))

class_labels = classifier.classes_

# Get the indices of the top 3 probabilities
top3_indices = np.argsort(y_pred_proba[0])[::-1][:3]

# Extract the top 3 probabilities and their corresponding crops
top3_probs = y_pred_proba[0][top3_indices]
top3_crops = class_labels[top3_indices]

# Print the top 3 probabilities and their corresponding crops
for prob, crop in zip(top3_probs, top3_crops):
    print("Probability:", prob)
    print("Crop:", crop)
    print()

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
accuracy_score(y_test, y_pred)

from joblib import dump
dump(classifier, 'MultipleCropsDecisionTreeClassifier.joblib')
dump(sc, 'multiple_scaler_crops.joblib')